module md5 where

// Types.
type Block = [16][32]

type Reg = [32]
type Regs = (Reg,Reg,Reg,Reg)

type Consts = ([32],[32],[32])

type Round = Regs -> Block -> Consts -> Reg


// Take a message of arbitrary length and produce a 128-bit "fingerprint"
// or "message digest".
md5
  : {n,l}
    ( fin n
    , fin l
    , 512 * l - 64 >= n + 1
    , 512 * l - 64 <= n + 512
    , 512 * l >= 64
    )
  => [n] -> [128]
md5 b = res`{m=l}
  where
    // Step 1. Append padding bits.
    bPad
      : {m}
        ( fin m
        , m >= n + 1
        , m <= n + 512
        , (m + 64) % 512 == 0
        )
      => [m]
    bPad = pad b

    // Step 2. Append length.
    bLen : Integer
    bLen = length b

    // Use the low-order 64 bits.
    b64 : [64]
    b64 = fromInteger bLen

    b64hi : [32]
    b64hi = reverseBytes (take`{32} b64)

    b64lo : [32]
    b64lo = reverseBytes (drop`{32} b64)

    // The resulting message has a length that is an exact multiple of 512 bits.
    b512
      : {m}
        ( fin m
        , m - 64 >= n + 1
        , m - 64 <= n + 512
        , m % 512 == 0
        , m >= 64
        )
      => [m]
    b512 = bPad # b64lo # b64hi

    M
      : {m}
        ( fin m
        , 32 * m - 64 >= n + 1
        , 32 * m - 64 <= n + 512
        , 32 * m % 512 == 0
        , 32 * m >= 64
        )
      => [m][32]
    M = groupBy`{32} b512

    // Step 3. Initialize MD buffer.
    A, B, C, D : Reg
    A = 0x67_45_23_01
    B = 0xef_cd_ab_89
    C = 0x98_ba_dc_fe
    D = 0x10_32_54_76

    // Step 4. Process message in 16-word blocks.
    // Copy block i into X.
    Xs
      : {m}
        ( fin m
        , 512 * m - 64 >= n + 1
        , 512 * m - 64 <= n + 512
        , 512 * m >= 64
        )
      => [m]Block
    Xs = split`{parts=m, each=16} M

    proc
      : {m}
        ( fin m
        , 512 * m - 64 >= n + 1
        , 512 * m - 64 <= n + 512
        , 512 * m >= 64
        ) => Regs
    proc = foldl`{n=m, b=Block} process (A,B,C,D) Xs

    // Step 5. Output.
    res
      : {m}
        ( fin m
        , 512 * m - 64 >= n + 1
        , 512 * m - 64 <= n + 512
        , 512 * m >= 64
        )
      => [128]
    res = join (map reverseBytes (regsToList proc`{m}))


// Helpers.

// The message is padded such that it's congruent to 448, modulo 512
// (64 bits shy of being a multiple of 512 bits long).
//
// Padding:
// * A single '1' bit is appended to the message
// * Then '0' bits are appended such that the length in bits satisfies the above
//   requirement.
//
// At least one bit and at most 512 bits are appended.
//
// This is DONE ALWAYS, even if the length of the message already satisfies
// the requirement.
pad
  : {n,m}
    ( fin n
    , fin m
    , m >= n + 1  // at least one bit
    , m <= n + 512  // at most 512 bits
    , (m + 64) % 512 == 0
    )
  => [n] -> [m]
pad b = b # take`{m - n} ([True] # (zero : [inf]))

addRegs : Regs -> Regs -> Regs
addRegs (a1,b1,c1,d1) (a2,b2,c2,d2) = (a1+a2,b1+b2,c1+c2,d1+d2)

regsToList : Regs -> [4]Reg
regsToList (x,y,z,w) = [x,y,z,w]

reverseBytes : {n,p} (fin n, n == 8 * p) => [n] -> [n]
reverseBytes x = join (reverse (groupBy`{each=8, parts=p} x))

// Process each 16-word block.
process : Regs -> Block -> Regs
process r0 X = addRegs r0 r4
  where
    // Apply a round function to registers.
    apply : Round -> Block -> Regs -> (Consts,Consts,Consts,Consts) -> Regs
    apply round x (a0,b0,c0,d0) (ca,cd,cc,cb) = (a1,b1,c1,d1)
      where
        a1 = round (a0,b0,c0,d0) x ca
        d1 = round (d0,a1,b0,c0) x cd
        c1 = round (c0,d1,a1,b0) x cc
        b1 = round (b0,c1,d1,a1) x cb

    X' : Block
    X' = map reverseBytes X

    r1,r2,r3,r4 : Regs
    r1 = foldl (apply round1 X') r0 consts1
    r2 = foldl (apply round2 X') r1 consts2
    r3 = foldl (apply round3 X') r2 consts3
    r4 = foldl (apply round4 X') r3 consts4


// Auxiliary functions.
F, G, H, I : [32] -> [32] -> [32] -> [32]
F x y z = x && y || ~x && z
G x y z = x && z || y && ~z
H x y z = x ^ y ^ z
I x y z = y ^ (x || ~z)


// Rounds.

// Round 1.
// Let [abcd k s i] denote the operation
// a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s).
round1 : Round
round1 (a,b,c,d) x (k,s,i) =
  b + ((a + F b c d + x@k + T@(i-1)) <<< s)  // assign to a

// Round 2.
// Let [abcd k s i] denote the operation
// a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s).
round2 : Round
round2 (a,b,c,d) x (k,s,i) =
  b + ((a + G b c d + x@k + T@(i-1)) <<< s)  // assign to a

// Round 3.
// Let [abcd k s i] denote the operation
// a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s).
round3 : Round
round3 (a,b,c,d) x (k,s,i) =
  b + ((a + H b c d + x@k + T@(i-1)) <<< s)  // assign to a

// Round 4.
// Let [abcd k s i] denote the operation
// a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s).
round4 : Round
round4 (a,b,c,d) x (k,s,i) =
  b + ((a + I b c d + x@k + T@(i-1)) <<< s)  // assign to a


// Consts.

// Round 1.
// [ABCD  0  7  1]  [DABC  1 12  2]  [CDAB  2 17  3]  [BCDA  3 22  4]
// [ABCD  4  7  5]  [DABC  5 12  6]  [CDAB  6 17  7]  [BCDA  7 22  8]
// [ABCD  8  7  9]  [DABC  9 12 10]  [CDAB 10 17 11]  [BCDA 11 22 12]
// [ABCD 12  7 13]  [DABC 13 12 14]  [CDAB 14 17 15]  [BCDA 15 22 16]
consts1 : [4](Consts,Consts,Consts,Consts)
consts1 =
  [ (( 0, 7, 1), ( 1,12, 2), ( 2,17, 3), ( 3,22, 4))
  , (( 4, 7, 5), ( 5,12, 6), ( 6,17, 7), ( 7,22, 8))
  , (( 8, 7, 9), ( 9,12,10), (10,17,11), (11,22,12))
  , ((12, 7,13), (13,12,14), (14,17,15), (15,22,16))
  ]

// Round 2.
// [ABCD  1  5 17]  [DABC  6  9 18]  [CDAB 11 14 19]  [BCDA  0 20 20]
// [ABCD  5  5 21]  [DABC 10  9 22]  [CDAB 15 14 23]  [BCDA  4 20 24]
// [ABCD  9  5 25]  [DABC 14  9 26]  [CDAB  3 14 27]  [BCDA  8 20 28]
// [ABCD 13  5 29]  [DABC  2  9 30]  [CDAB  7 14 31]  [BCDA 12 20 32]
consts2 : [4](Consts,Consts,Consts,Consts)
consts2 =
  [ (( 1, 5,17), ( 6, 9,18), (11,14,19), ( 0,20,20))
  , (( 5, 5,21), (10, 9,22), (15,14,23), ( 4,20,24))
  , (( 9, 5,25), (14, 9,26), ( 3,14,27), ( 8,20,28))
  , ((13, 5,29), ( 2, 9,30), ( 7,14,31), (12,20,32))
  ]

// Round 3.
// [ABCD  5  4 33]  [DABC  8 11 34]  [CDAB 11 16 35]  [BCDA 14 23 36]
// [ABCD  1  4 37]  [DABC  4 11 38]  [CDAB  7 16 39]  [BCDA 10 23 40]
// [ABCD 13  4 41]  [DABC  0 11 42]  [CDAB  3 16 43]  [BCDA  6 23 44]
// [ABCD  9  4 45]  [DABC 12 11 46]  [CDAB 15 16 47]  [BCDA  2 23 48]
consts3 : [4](Consts,Consts,Consts,Consts)
consts3 =
  [ (( 5, 4,33), ( 8,11,34), (11,16,35), (14,23,36))
  , (( 1, 4,37), ( 4,11,38), ( 7,16,39), (10,23,40))
  , ((13, 4,41), ( 0,11,42), ( 3,16,43), ( 6,23,44))
  , (( 9, 4,45), (12,11,46), (15,16,47), ( 2,23,48))
  ]

// Round 4.
// [ABCD  0  6 49]  [DABC  7 10 50]  [CDAB 14 15 51]  [BCDA  5 21 52]
// [ABCD 12  6 53]  [DABC  3 10 54]  [CDAB 10 15 55]  [BCDA  1 21 56]
// [ABCD  8  6 57]  [DABC 15 10 58]  [CDAB  6 15 59]  [BCDA 13 21 60]
// [ABCD  4  6 61]  [DABC 11 10 62]  [CDAB  2 15 63]  [BCDA  9 21 64]
consts4 : [4](Consts,Consts,Consts,Consts)
consts4 =
  [ (( 0, 6,49), ( 7,10,50), (14,15,51), ( 5,21,52))
  , ((12, 6,53), ( 3,10,54), (10,15,55), ( 1,21,56))
  , (( 8, 6,57), (15,10,58), ( 6,15,59), (13,21,60))
  , (( 4, 6,61), (11,10,62), ( 2,15,63), ( 9,21,64))
  ]


// Construct a 64-element table from the sine function.
// In Python3:
// >>> import math
// >>> def f(i): return 4294967296 * abs(math.sin(i))
// >>> list(map(lambda p: print('0x{:08x} {}'.format((int(f(p[1]))), p[0]+1)), enumerate(range(1,65))))
T : [64][32]
T =
  [ 0xd76aa478  // 1
  , 0xe8c7b756  // 2
  , 0x242070db  // 3
  , 0xc1bdceee  // 4
  , 0xf57c0faf  // 5
  , 0x4787c62a  // 6
  , 0xa8304613  // 7
  , 0xfd469501  // 8
  , 0x698098d8  // 9
  , 0x8b44f7af  // 10
  , 0xffff5bb1  // 11
  , 0x895cd7be  // 12
  , 0x6b901122  // 13
  , 0xfd987193  // 14
  , 0xa679438e  // 15
  , 0x49b40821  // 16
  , 0xf61e2562  // 17
  , 0xc040b340  // 18
  , 0x265e5a51  // 19
  , 0xe9b6c7aa  // 20
  , 0xd62f105d  // 21
  , 0x02441453  // 22
  , 0xd8a1e681  // 23
  , 0xe7d3fbc8  // 24
  , 0x21e1cde6  // 25
  , 0xc33707d6  // 26
  , 0xf4d50d87  // 27
  , 0x455a14ed  // 28
  , 0xa9e3e905  // 29
  , 0xfcefa3f8  // 30
  , 0x676f02d9  // 31
  , 0x8d2a4c8a  // 32
  , 0xfffa3942  // 33
  , 0x8771f681  // 34
  , 0x6d9d6122  // 35
  , 0xfde5380c  // 36
  , 0xa4beea44  // 37
  , 0x4bdecfa9  // 38
  , 0xf6bb4b60  // 39
  , 0xbebfbc70  // 40
  , 0x289b7ec6  // 41
  , 0xeaa127fa  // 42
  , 0xd4ef3085  // 43
  , 0x04881d05  // 44
  , 0xd9d4d039  // 45
  , 0xe6db99e5  // 46
  , 0x1fa27cf8  // 47
  , 0xc4ac5665  // 48
  , 0xf4292244  // 49
  , 0x432aff97  // 50
  , 0xab9423a7  // 51
  , 0xfc93a039  // 52
  , 0x655b59c3  // 53
  , 0x8f0ccc92  // 54
  , 0xffeff47d  // 55
  , 0x85845dd1  // 56
  , 0x6fa87e4f  // 57
  , 0xfe2ce6e0  // 58
  , 0xa3014314  // 59
  , 0x4e0811a1  // 60
  , 0xf7537e82  // 61
  , 0xbd3af235  // 62
  , 0x2ad7d2bb  // 63
  , 0xeb86d391  // 64
  ]
